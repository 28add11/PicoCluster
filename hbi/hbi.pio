.program hbiTX
.side_set 1 opt

.wrap_target
    out pins, 4 side 0 ;stall at 0 to prevent reads
    wait 1 pin 4 side 1 ;wait for acknowlige signal
    wait 0 pin 4
.wrap

% c-sdk {
static inline void init_hbiTX(PIO pio, uint sm, uint pin_base, uint clk_pin, uint offset) {
    pio_sm_config c = hbiTX_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, 4); //set up pins
    sm_config_set_in_pins (&c, pin_base + 4); 
    sm_config_set_sideset_pins (&c, clk_pin); //clk_pin can be anything, as opposed to being sequential to data as in hbiRX
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 4, true);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base + 4, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
    for (uint i = pin_base; i < pin_base + 5; ++i)
        pio_gpio_init(pio, i);
    pio_gpio_init(pio, clk_pin);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
    }
%}

.program hbiRX
.side_set 1 opt
.wrap_target
    wait 0 pin 4 side 1 ;clocked read, and send an acknolige once the in instruction is reached
    wait 1 pin 4 side 0
    in pins, 4 ;only send ack after in has completed since in could stall even though ack is sent
.wrap

% c-sdk {
static inline void init_hbiRX(PIO pio, uint sm, uint pin_base, uint ack_pin, uint offset) {
    pio_sm_config c = hbiRX_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin_base); //setting up pins, 5th pin is clock
    sm_config_set_sideset_pins(&c, ack_pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 5, false);
    pio_sm_set_consecutive_pindirs(pio, sm, ack_pin, 1, true);
    for (uint i = pin_base; i < pin_base + 5; ++i)
        pio_gpio_init(pio, i);
    pio_gpio_init(pio, ack_pin);
    sm_config_set_in_shift(&c, true, true, 8); //configure to shift right (because of paralell bus) and autopush to fifo after every in
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX); //Make fifo bigger for DMA
    pio_sm_init(pio, sm, offset, &c); //send 'er running
    pio_sm_set_enabled(pio, sm, true);
    }
%}
    